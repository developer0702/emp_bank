Request:

{
  "id": "730061B",
  "requestType": "ACTBYEMP",
  "versionNumber": "01",
  "requestId": "123",
  "limitResult": {
    "resultPage": 0,
    "resultSize": 0
  }
}

Response:
{
    "requestId": "123",
    "status": {
        "statusCode": "0000",
        "severity": "INF",
        "statusDescription": "requestSuccessfullyProcessed"
    }, //may be will get it from code if SRVice_message_type
    "responseDetails": {
        "branchId": "003",
        "planId": "061",
        "employerAccounts": [
            {
                "employerGroupId": "730061B",
                "participantDetails": [
                    {
                        "firstName": "JOYCE",
                        "middleInitial": "",
                        "lastName": "GRANT",
                        "socialSecurityNumber": "251110091",
                        "accountNumber": "405981141",
                        "accountOpenDate": "2025-01-29T12:07:41.202+00:00",
                        "effectiveTermDate": "2025-01-29T12:07:41.202+00:00",
                        "routingNumber": "124384877",
                        "employerName": "AGFA MATERIALS",
                        "participantStatus": {
                            "code": "A",
                            "codeName": "ACTIVE"
                        }
                    },
                    {
                        "firstName": "WOJCIECH",
                        "middleInitial": "",
                        "lastName": "BALCEWICZ",
                        "socialSecurityNumber": "105460244",
                        "accountNumber": "404743908",
                        "accountOpenDate": "2025-01-29T12:07:41.202+00:00",
                        "effectiveTermDate": "2025-01-29T12:07:41.202+00:00",
                        "routingNumber": "124384877",
                        "employerName": "AGFA MATERIALS",
                        "participantStatus": {
                            "code": "A",
                            "codeName": "ACTIVE"
                        }
                    }
                ]
            }
        ]
    }
}


package com.optum.ftps.ob.core.account.details.repository.impl;

import com.optum.ftps.ob.core.account.details.constants.AccountDetailsEsbConstants;
import com.optum.ftps.ob.core.account.details.constants.LoggingConstants;
import com.optum.ftps.ob.core.account.details.dto.esb.AccountDetailsEsbDto;
import com.optum.ftps.ob.core.account.details.dto.esb.AccountInfoDto;
import com.optum.ftps.ob.core.account.details.repository.AccountDetailsEsbRepository;
import com.optum.ftps.ob.core.account.details.util.StringUtil;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

@Repository
public class AccountDetailsEsbRepositoryImpl implements AccountDetailsEsbRepository {

    @Override
    public Page<AccountInfoDto> getAccountDetailsPaginated(
            AccountDetailsEsbDto accountDetailsEsbDto, Pageable pageable) {
        List<AccountInfoDto> accounts = getAccountInfoDtoList(1500); // Generate 1500 records
        int start = (int) pageable.getOffset();
        int end = Math.min((start + pageable.getPageSize()), accounts.size());
        return new PageImpl<>(accounts.subList(start, end), pageable, accounts.size());
    }

    @Override
    public AccountDetailsEsbDto getAccountDetails(AccountDetailsEsbDto accountDetailsEsbDto) {

        return getEmpAccountDetails(accountDetailsEsbDto);
    }

    public AccountDetailsEsbDto getEmpAccountDetails(AccountDetailsEsbDto accountDetailsEsbDto) {
        try {
            boolean rsExists = true;

            List<AccountInfoDto> accounts = null;
            if (rsExists) {
                accounts = getAccountInfoDtoList(1500); // Generate 1500 records
            }
            accountDetailsEsbDto.setBranchId("003"); // it is fetched by DB
            accountDetailsEsbDto.setPlanId("061"); // it is fetched by DB
            accountDetailsEsbDto.setAccounts(accounts);

            // code added for ANF report
            getEnrlGoodRecDetails(accountDetailsEsbDto, rsExists);
            getEnrlErrRecDetails(accountDetailsEsbDto, rsExists);
            List<AccountInfoDto> list = accountDetailsEsbDto.getAccounts();
            Set<String> contentSet = new LinkedHashSet<>();
            for (AccountInfoDto infoTO : list) {
                if (!StringUtil.isEmpty(infoTO.getSocialSecurityNumber())) {
                    contentSet.add(LoggingConstants.SSN.getValue());
                }
                if (!StringUtil.isEmpty(infoTO.getFirstName())
                        || !StringUtil.isEmpty(infoTO.getLastName())
                        || !StringUtil.isEmpty(infoTO.getMiddleInitial())) {
                    contentSet.add(LoggingConstants.NAME.getValue());
                }
                if (!StringUtil.isEmpty(infoTO.getRoutingNumber())
                        || !StringUtil.isEmpty(infoTO.getAccountNumber())
                        || (infoTO.getAccountOpenDate() != null)
                        || (infoTO.getEffectiveTermDate() != null)) {
                    contentSet.add(LoggingConstants.ACCTINFO.getValue());
                }
                if (contentSet.size() == 3) break;
            }
            if (contentSet.size() > 0) {}

        } catch (Exception ex) {
            //  throw new DAOException(ex);
        }

        return accountDetailsEsbDto;
    }

    private AccountDetailsEsbDto getEnrlGoodRecDetails(
            AccountDetailsEsbDto accountDetailsEsbDto, boolean rsExists) {

        List<AccountInfoDto> goodRecDetails = new ArrayList<>();
        AccountInfoDto accountInfo = null;
        String employerId = accountDetailsEsbDto.getEmployerId();
        employerId = StringUtil.getTrimmedStringUpperCase(employerId);

        if (rsExists) {
            //// while(nrs.next()){//if reseult set to iterate
            accountInfo = getAccountInfoDto(); // Pass Resultset if connceted with D
            goodRecDetails.add(accountInfo);
            // }
        }
        accountDetailsEsbDto.setEnrlGoodRec(goodRecDetails);
        return accountDetailsEsbDto;
    }

    private AccountDetailsEsbDto getEnrlErrRecDetails(
            AccountDetailsEsbDto accountDetailsEsbDto, boolean rsExists) {
        List<AccountInfoDto> goodRecDetails = new ArrayList<>();
        AccountInfoDto accountInfo = null;
        String employerId = accountDetailsEsbDto.getEmployerId();
        employerId = StringUtil.getTrimmedStringUpperCase(employerId);

        if (rsExists) {
            //// while(nrs.next()){//if reseult set to iterate
            accountInfo = getAccountInfoDto(); // Pass Resultset if connceted with D
            goodRecDetails.add(accountInfo);
            // }
        }
        accountDetailsEsbDto.setEnrlErrorRec(goodRecDetails);
        return accountDetailsEsbDto;
    }

    private AccountInfoDto getAccountInfoDto() {
        AccountInfoDto accountInfo = new AccountInfoDto();
        accountInfo.setEmployerGroupId("704280BCC");
        accountInfo.setFirstName("Robin");
        accountInfo.setMiddleInitial("");
        accountInfo.setLastName(("Raj"));
        accountInfo.setSocialSecurityNumber("105460244");
        accountInfo.setEmployerName(AccountDetailsEsbConstants.ORG_NAME);
        return accountInfo;
    }

    private List<AccountInfoDto> getAccountInfoDtoList(int count) {
        List<AccountInfoDto> accountInfoList = new ArrayList<>();

        for (int i = 0; i < count; i++) {
            AccountInfoDto accountInfo = new AccountInfoDto();
            accountInfo.setEmployerGroupId("730061B");
            accountInfo.setFirstName("FirstName" + i);
            accountInfo.setMiddleInitial("M");
            accountInfo.setLastName("LastName" + i);
            accountInfo.setSocialSecurityNumber("222222222" + i);
            accountInfo.setAccountNumber("1103644521" + i);
            accountInfo.setAccountOpenDate(new Date());
            accountInfo.setAcctStatuscode("A");
            accountInfo.setEffectiveTermDate(new Date());
            accountInfo.setRoutingNumber("124384877");
            accountInfo.setEmployerName(AccountDetailsEsbConstants.ORG_NAME);

            accountInfoList.add(accountInfo);
        }
        return accountInfoList;
    }
}






---
openapi: 3.0.3
info:
  version: 1.0.0
  title: Account Details API
  description: OpenAPI specification for AccountDetails APIs
  termsOfService: https://changeme.optum.com/
  contact:
    name: Optum Financial OBI Team
    email: Team_OBI@ds.uhc.com
    url: https://www.optum.com/
paths:
  /getAccountDetails:
    post:
      operationId: getAccountDetailsByMemberId
      summary: Get Account Details Summary
      tags:
      - AccountDetails
      requestBody:
        $ref: "#/components/requestBodies/AccountsByMemberIDRequest"
      responses:
        "200":
          $ref: "#/components/responses/AccountDetailsResponse"
        "400":
          $ref: "#/components/responses/BadRequestErrorResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
        "500":
          $ref: "#/components/responses/ServerErrorResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
  /getAccountDetailsESB:
    post:
      operationId: getAccountDetails
      summary: Get Account Details ESB Details
      tags:
      - AccountDetails
      requestBody:
        $ref: "#/components/requestBodies/AccountDetailsRequest"
      responses:
        "200":
          $ref: "#/components/responses/AccountDetailsESBResponse"
        "400":
          $ref: "#/components/responses/BadRequestErrorResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
        "500":
          $ref: "#/components/responses/ServerErrorResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
components:
  requestBodies:
    AccountsByMemberIDRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AccountsByMemberIDRequest"
    AccountDetailsRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AccountDetailsRequest"
  responses:
    BadRequestErrorResponse:
      description: Invalid element on request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    NotFoundErrorResponse:
      description: Resource not found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    ServerErrorResponse:
      description: Server failed to process the request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    UnexpectedErrorResponse:
      description: Unexpected error.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    AccountDetailsResponse:
      description: valid response upon successful summary retrieval
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AccountDetailsResponse"
    AccountDetailsESBResponse:
      description: valid response upon successful details retrieval
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AccountDetailsESBResponse"
  schemas:
    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorItem"
    ErrorItem:
      type: object
      properties:
        statusCode:
          type: string
          description: The status code based on the type of error.
          example: 2
        severity:
          type: string
          example: ERR
        statusDescription:
          type: string
          example: INCORRECT INPUT FORMAT
    AccountsByMemberIDRequest:
      type: object
      properties:
        branch:
          type: string
        memberId:
          type: string
        plan:
          type: string
    AccountDetailsResponse:
      type: object
      properties:
        requestId:
          type: string
        branch:
          type: string
        customerNumber:
          type: string
        message:
          type: string
        plan:
          type: string
        ssn:
          type: string
        customerDetails:
          type: array
          items:
            $ref: "#/components/schemas/CustomerAccountDetails"
    CustomerAccountDetails:
      type: object
      properties:
        customerNumber:
          type: string
        accountDetails:
          type: array
          items:
            $ref: "#/components/schemas/AccountDetail"
    AccountDetail:
      type: object
      properties:
        accountNumber:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        middleInitial:
          type: string
        openDate:
          type: Date
        ssn:
          type: string
        status:
          type: string
    AccountDetailsRequest:
      type: object
      properties:
        id:
          type: string
        requestType:
          type: string
        versionNumber:
          type: string
        page:
          type: number
        requestId:
          type: string
        limitResult:
          type: object
          $ref: "#/components/schemas/LimitResultType"
    LimitResultType:
      properties:
        resultPage:
          type: number
        resultSize:
          type: number
    AccountDetailsESBResponse:
      type: object
      properties:
        requestId:
          type: string
        status:
          $ref: "#/components/schemas/StatusType"
        responseDetails:
          $ref: "#/components/schemas/ResponseDetailsType"
    ResponseDetailsType:
      type: object
      properties:
        branchId:
          type: string
        planId:
          type: string
        employerAccounts:
          type: array
          items:
            $ref: "#/components/schemas/EmployerAccountsType"
    EmployerAccountsType:
      type: object
      properties:
        employerGroupId:
          type: string
        participantDetails:
          type: array
          items:
            $ref: "#/components/schemas/ParticipantDetailsType"
    ParticipantDetailsType:
      type: object
      properties:
        firstName:
          type: string
        middleInitial:
          type: string
        lastName:
          type: string
        socialSecurityNumber:
          type: string
        accountNumber:
          type: string
        accountOpenDate:
          type: Date
        effectiveTermDate:
          type: Date
        routingNumber:
          type: string
        employerName:
          type: string
        participantStatus:
          type: object
          $ref: "#/components/schemas/ParticipantStatusType"
    ParticipantStatusType:
      type: object
      properties:
        code:
          type: string
        codeName:
          type: string
    StatusType:
      type: object
      properties:
        statusCode:
          type: string
        severity:
          type: string
        statusDescription:
          type: string


